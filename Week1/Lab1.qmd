---
title: "Lab 1"
format:
  html:
    theme : cosmo
    code-fold: true
    embed-resources: true
execute:
    echo: true
---

[Link to my Github Repository](https://github.com/bigturtle13/GSB544/tree/main/Week1)

```{python}
import pandas as pd
```

Task 1

Identify, and list here, what aesthetics are being used and which variables are being mapped to each aesthetic.

Aesthetics beings used: X, Y, Size, Fill

Which variables mapped to each aesthetic: 
X = income("income")
Y = life expectancy("life_exp")
size = population("population")
fill = Four Regions("four_regions")

```{python}

#first dataset
df = pd.read_csv('/Users/amritdhillon/Desktop/Computing and Machine Learning for Business Analytics/Week 1/Lab 1/q1data.csv')

dfclean = df.dropna(subset=["four_regions"]).copy() #cleans dataset removes any entries with missing regions in "four_regions"

```

```{python}
#first plot
from plotnine import *
(
    ggplot(dfclean, aes(x="income", y="life_exp", size = "population", fill = "four_regions"))

    + geom_point() 

    +labs(x = "Income", y = "Life Expectancy", fill = "Four Regions")

    + scale_size(range=(2, 9),guide=None)#bubble size, hide population legend

    +scale_fill_manual(values=
            {"africa": "#62FFE7",#hex lets you use color picker
            "americas": "#52F683",
            "europe": "#F7F01C",
            "asia": "#F46D6D"})#colors for bubbles

    +theme(aspect_ratio=0.5,figure_size=(10, 6),
        panel_background=element_rect(fill="white"), # background color
        panel_grid_major=element_line(color="lightgray", size=0.6), #plot line colors
        axis_line_x=element_line(color="black", size=0.8), #x axis
        axis_line_y=element_line(color="black", size=0.8),#y axis
        axis_ticks_major_x = element_blank(), #remove x tick marks
        axis_ticks_major_y = element_blank()) #remove y tick marks 

    + scale_x_log10(breaks=[500, 1000, 2000, 4000, 8000, 16000, 32000, 64000], labels = ["500", "1000", "2000", "4000", "8000", "16k", "32k", "64k"], limits = [500,64000]) # x axis values

    + scale_y_continuous(breaks=[20, 30, 40, 50, 60, 70, 80, 90], limits = [20,90]) # y axis values

    +annotate(geom = "text",x = 5000, y = 55,label = "2010",size = 200,alpha = 0.2, color = "gray")#2010 in the background

    + annotate("text", x=64000,   y=20, label="per person (GDP/capita, PPPS inflation-adjusted)",ha="right",  va="bottom", size=10, alpha=0.7) #bottom right text

    + annotate("text", x=500, y=90, label="years",ha="left", va="top", size=10, alpha=0.7, angle = 90) #top left text

)
```

Task 1: Geometries Beside geom_point

```{python}
(
    ggplot(dfclean, aes("income", "life_exp", color="four_regions"))

    +geom_smooth(method="lm", se=False, size=1.1, fullrange = True)
    #full range shows the full range of x values for each line, se = False removes confidence interval shading

    +scale_color_manual(values=
            {"africa": "#62FFE7",#hex lets you use color picker
            "americas": "#52F683",
            "europe": "#F7F01C",
            "asia": "#F46D6D"})#colors for lines

    +labs(x = "Income", y = "Life Expectancy", color = "Four Regions")

    +scale_x_log10(breaks=[500, 1000, 2000, 4000, 8000, 16000, 32000, 64000], labels = ["500", "1000", "2000", "4000", "8000", "16k", "32k", "64k"], limits = [500,64000]) # x axis values

    +scale_y_continuous(breaks=[20, 30, 40, 50, 60, 70, 80, 90], limits = [20,90]) # y axis values

    +theme(aspect_ratio=0.5,figure_size=(10, 6),
        panel_background=element_rect(fill="white"), # background color
        panel_grid_major=element_line(color="lightgray", size=0.6), #plot line colors
        axis_line_x=element_line(color="black", size=0.8), #x axis
        axis_line_y=element_line(color="black", size=0.8),#y axis
        axis_ticks_major_x = element_blank(), #remove x tick marks
        axis_ticks_major_y = element_blank()) #remove y tick marks 

    +annotate(geom = "text",x = 5000, y = 55,label = "2010",size = 200,alpha = 0.2, color = "gray")#2010 in the background

    + annotate("text", x=64000,   y=20, label="per person (GDP/capita, PPPS inflation-adjusted)",ha="right",  va="bottom", size=6, alpha=0.7) #bottom right text

    + annotate("text", x=500, y=90, label="years",ha="left", va="top", size=6, alpha=0.7, angle = 90) #top left text
)
```

Besides geom_point for Task 1, geom_smooth serves as a useful geometry in displaying the overall relationship between income and life expectancy for each region rather than by individual country filtered by region using color. Rather than finding the trend for individual countries this geometry displays a more general trend for the relationship for each of the four regions. 

Task 2

Identify, and list here, what aesthetics are being used and which variables are being mapped to each aesthetic.

Aesthetics beings used: X, Y, Size, Fill

Which variables mapped to each aesthetic: 
X = exports("exports")
Y = imports("imports")
size = energy("fixenergy")
fill = Four Regions("four_regions")

```{python}
#second dataset
df2 = pd.read_csv('/Users/amritdhillon/Desktop/Computing and Machine Learning for Business Analytics/Week 1/Lab 1/q2data.csv')

df2clean = df2.dropna(subset=["four_regions"]).copy() #cleans dataset removes any entries with missing regions in "four_regions"

```

```{python}
#remove values like 12k from energy, create new column fixenergy to use
df2clean["fixenergy"] = pd.to_numeric(
    df2clean["energy"].astype(str).str.strip().str.replace(r"[kK]$", "e3", regex=True), #replaces strings ending with k or K with the string times 10^3=1000 = k
    errors="coerce"
)
```

```{python}
#second plot

(    
    ggplot(df2clean, aes(x="exports", y="imports", size = "fixenergy", fill = "four_regions"))

    + geom_point() 

    +labs(x = "Exports(\% of GDP)", y = "Imports(\% of GDP)", fill = "Four Regions")

    +scale_size(range=(2, 12),guide=None)#bubble size, hide population legend

    +scale_x_continuous(breaks=[20, 40, 60, 80, 100, 120, 140, 160, 180, 200, 220], limits = [20,220]) # y axis values

    +scale_y_continuous(breaks=[50, 100, 150, 200, 250, 300, 350, 400], limits = [50,400]) # y axis values

    +scale_fill_manual(values=
            {"africa": "#62FFE7",#hex lets you use color picker
            "americas": "#52F683",
            "europe": "#F7F01C",
            "asia": "#F46D6D"})#colors for bubbles

    +theme(aspect_ratio=0.5,figure_size=(9, 6),
        panel_background=element_rect(fill="white"), # background color
        panel_grid_major=element_line(color="lightgray", size=0.6),axis_line_x=element_line(color="black", size=0.8), #x axis
        axis_line_y=element_line(color="black", size=0.8), #y axis
        axis_text_y  = element_text(rotation=90, ha='right'),#rotate y labels
        axis_ticks_major_x = element_blank(), #remove x tick marks
        axis_ticks_major_y = element_blank()) #remove y tick marks 

    +annotate(geom = "text",x = 120, y = 200,label = "1997",size = 200,alpha = 0.2, color = "gray")#1997 in the background
)
```

Task 2: Geometries Beside geom_point

```{python}
(    
    ggplot(df2clean, aes(x="exports", y="imports", fill = "four_regions"))

    +geom_pointdensity()

    +labs(x = "Exports(\% of GDP)", y = "Imports(\% of GDP)", fill = "Four Regions")

    +scale_x_continuous(breaks=[20, 40, 60, 80, 100, 120, 140, 160, 180, 200, 220], limits = [20,220]) # y axis values

    +scale_y_continuous(breaks=[50, 100, 150, 200, 250, 300, 350, 400], limits = [50,400]) # y axis values

    +scale_fill_manual(values=
            {"africa": "#62FFE7",#hex lets you use color picker
            "americas": "#52F683",
            "europe": "#F7F01C",
            "asia": "#F46D6D"})#colors for bubbles

    +theme(aspect_ratio=0.5,figure_size=(9, 6),
        panel_background=element_rect(fill="white"), # background color
        panel_grid_major=element_line(color="lightgray", size=0.6),axis_line_x=element_line(color="black", size=0.8), #x axis
        axis_line_y=element_line(color="black", size=0.8), #y axis
        axis_text_y  = element_text(rotation=90, ha='right'),#rotate y labels
        axis_ticks_major_x = element_blank(), #remove x tick marks
        axis_ticks_major_y = element_blank()) #remove y tick marks 

    +annotate(geom = "text",x = 120, y = 200,label = "1997",size = 200,alpha = 0.2, color = "gray")#1997 in the background
)
```

This plot  outlines the plot point of each country the local point density of ranging from low(dark purple) to high(yellow). The brighter the outline of the points, the more countries that are clustered in the exports/imports plane. It can be seen that the densest concentration of points occurs when exports are between roughly 40 and 80 percent while imports are between around 60 and 120 percent, as the outlines are of the lightest hues of each country and points are most densely distributed. This is an extremely helpful plot in understanding concentration of the data, but it costs the information of seeing the size of each country in terms of energy as appropriately sized bubbles are not available with this geometry alone.

Task 3

Identify, and list here, what aesthetics are being used and which variables are being mapped to each aesthetic.

Aesthetics beings used: X, Y, Size, Fill

Which variables mapped to each aesthetic: 
X = Individuals Using the Internet("internet_users")
Y = GDP/capita("gdp")
size = income("income")
fill = Four Regions("four_regions")

```{python}
#third dataset
df3 = pd.read_csv('/Users/amritdhillon/Desktop/Computing and Machine Learning for Business Analytics/Week 1/Lab 1/q3data.csv')

df3clean = df3.dropna(subset=["four_regions"]).copy() #cleans dataset removes any entries with missing regions in "four_regions"

```

```{python}

(    
    ggplot(df3clean, aes(x="internet_users", y="gdp", size = "income", fill = "four_regions"))

    + geom_point() 

    +labs(x = "Individuals Using the Internet", y = "GDP/capita", fill = "Four Regions")

    +scale_fill_manual(values=
            {"africa": "#62FFE7",#hex lets you use color picker
            "americas": "#52F683",
            "europe": "#F7F01C",
            "asia": "#F46D6D"})#colors for bubbles

    + scale_x_continuous(breaks=[0,10,20, 30, 40, 50, 60, 70, 80, 90], limits = [0,90]) # y axis values

    + scale_y_log10(breaks=[200, 500, 1000, 2000, 5000, 10000, 20000, 50000,100000], labels=["200", "500", "1000", "2000", "5000", "10k", "20k", "50k", "100k"], limits=[200, 100000]) # x axis values

    +scale_size(range=(2, 12),guide=None)#bubble size, hide population legend

    + annotate("text", x=90,   y=200, label="per person (\% of population)",ha="right",  va="bottom", size=10, alpha=0.7) #bottom right text

    + annotate("text", x=0, y=99999, label="US$, inflation-adjusted",ha="left", va="top", size=8, alpha=0.7, angle = 90) #top left text

    +annotate(geom = "text",x = 45, y = 3000,label = "2001",size = 200,alpha = 0.2, color = "gray")#2001 in the background

    +theme(aspect_ratio=0.5,figure_size=(10, 6),
        panel_background=element_rect(fill="white"), # background color
        panel_grid_major=element_line(color="lightgray", size=0.6), #plot lines grey
        axis_line_x=element_line(color="black", size=0.8), #x axis
        axis_line_y=element_line(color="black", size=0.8), #y axis
        axis_ticks_major_x = element_blank(), #remove x tick marks
        axis_ticks_major_y = element_blank()) #remove y tick marks

)

```

Task 3: Geometries Beside geom_point

```{python}
(
    ggplot(df3clean, aes("internet_users", "gdp", fill = "four_regions", size = "income"))

    +geom_jitter()

    +scale_fill_manual(values=
            {"africa": "#62FFE7",#hex lets you use color picker
            "americas": "#52F683",
            "europe": "#F7F01C",
            "asia": "#F46D6D"})#colors for bubbles

    +scale_x_continuous(breaks=[0,10,20,30,40,50,60,70,80,90], limits=[0,90])

    +scale_y_log10(breaks=[200,500,1000,2000,5000,10000,20000,50000,100000],labels=["200","500","1k","2k","5k","10k","20k","50k","100k"],
    limits=[200,100000])

    + labs(x="Individuals Using the Internet", y="GDP/capita", fill = "Four Regions")

    + annotate("text", x=90,   y=200, label="per person (\% of population)",ha="right",  va="bottom", size=10, alpha=0.7) #bottom right text

    + annotate("text", x=0, y=99999, label="US$, inflation-adjusted",ha="left", va="top", size=8, alpha=0.7, angle = 90) #top left text

    +annotate(geom = "text",x = 45, y = 3000,label = "2001",size = 200,alpha = 0.2, color = "gray")#2001 in the background

    +theme(aspect_ratio=0.5,figure_size=(10, 6),
        panel_background=element_rect(fill="white"), # background color
        panel_grid_major=element_line(color="lightgray", size=0.6), #plot lines grey
        axis_line_x=element_line(color="black", size=0.8), #x axis
        axis_line_y=element_line(color="black", size=0.8), #y axis
        axis_ticks_major_x = element_blank(), #remove x tick marks
        axis_ticks_major_y = element_blank()) #remove y tick marks
   
   +scale_size(range=(2, 12),guide=None)#bubble size, hide population legend
)
```

Like geom_point, geom_jitter creates a scatterplot using the data. The difference lies in how exactly the points are plotted. Whereas, geom_point plots points at their exact positions, geom_jitter adds some slight noise to each of the x and y coordinates to help spread overlapping points and better visualize the plot. This can be extremely helpful in visualizing this data a bit better for overplotting, where many of the points happen to hide the others like with this data.